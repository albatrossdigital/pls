<?php
/**
 * @file
 * The module file for pioneer_custom module.
 */
function pioneer_custom_form_alter(&$form, &$form_state, $form_id) {
  //dpm($form_id);
}


/**
 * Implements hook_form_alter();
 **/
function pioneer_custom_form_views_exposed_form_alter(&$form, &$form_state) {
  if($form['#id'] == 'views-exposed-form-libraries-page') {
    $form['county']['#options']['All'] = t('A-Z Libraries');
  	$form['search']['#attributes'] = array(
      'placeholder' => t('Search'),
      'class' => array('field-search'),
  	);
  }
}





/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function pioneer_custom_block_info() {

  $blocks['library_select'] = array(
    'info' => t('Find a Library'),
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function pioneer_custom_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'library_select':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = t('Find a Library');
      // The content of the block is typically generated by calling a custom
      // function.
      $form = drupal_get_form('pioneer_custom_library_select_form');
      $block['content'] = drupal_render($form);//theme('pioneer_custom_vufind');
      break;
  }
  return $block;
}


function pioneer_custom_library_select_form($form, &$form_state) {  
  $form = array();
  $form['#action'] = 'libraries';
  $form['#method'] = 'GET';

  $libraries = flight_config_view_data('library_list', 'default');
  //dpm($libraries);
  $options = array('' => t('Select a Library'));
  foreach ($libraries as $library) {
    $options[url('node/' . $library->nid)] = $library->node_title;
  }
  $form['select_library'] = array(
    '#type' => 'select',
    '#title' => t('Library'),
    '#options' => $options,
  );

  return $form;
}

/**
 * Allow a custom module to alter ldap_authorizations after they have been determined by ldap_authorizations,
 *  but before they are granted/removed from user.
 */

function pioneer_custom_ldap_authorization_authorizations_alter($authorizations, $params) {
  // Make administrator
  $params['user']->roles[3] = 'administrator';

  // Add to all domains
  $params['user']->domain_user = array(
    1 => 1,
    2 => 2,
  );

  entity_save('user', $params['user']);
  dpm($params['user']);
}